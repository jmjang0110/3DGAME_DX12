
● HLSL ( High Level Shader Language for DirectX )
	- DirectX 에서 사용할 수 있는 쉐이더 프로그래밍 언어
	- HLSL 쉐이더는 미리 컴파일 될 수 있고 실행시에 컴파일 될 수 있다.
		D3DCompileFromFile() 함수 

● DirectX HLSL Program
	- HLSL 세이더 프로그램은 변수 (Variables) 와 함수 (Functions)로 구성 
	- 함수는 문장(Statements)로 구성된다.

● HLSL <----> C/C++ 비교
[유사점]
	- 하나의 문장은 세미콜론으로 끝난다. 
	- 문장의 블록은 {}를 사용한다.
	- C 스타일의 함수와 구조체를 사용한다.
	- C 스타일의 전처리를 지원한다 ( 매크로 , 조건부 컴파일 , #include )

[차이점]
	- 포인터 자료형과 포인터 연산을 지원하지 않는다.
	- 동적 메모리 할당 ( Dynamic Memonry Allocation )을 지원하지 않는다. 
	- C++ 유형의 템플릿을 지원하지 않는다.
	- 재귀함수 호출을 지원하지 않는다. 

- 전역변수				: Global 상수버퍼에 추가 
- 유니폼 파라미터 변수	: Parma 상수 버퍼에 추가 


● 메모리 구조  
[ SHADER ]	<-----------	   메모리 리소스
							[ Constant Buffers ]
			<-	[Sampler]---[    Textures	   ]
							[	 Buffers	   ]


* 하나의 쉐이더에 동시에 16개의 샘플러 연결 가능 
128개의 테스처와 버퍼, 16(실제로 14)개의 상수 버퍼를 연결 가능 


● 쉐이더 모델 ( Shader Model )
	- 쉐이더 모델에 따라 쉐이더 명령어와 성능(기능)이 추가되어 발전 
	  새로운 쉐이더 모델은 이전 버젼의 쉐이더 모델을 포함 
	  공통 쉐이더 코어  ( Common Shader Core )를 기반으로 설꼐 
	
	- [Shader Profile] 쉐이더 프로파일 : 쉐이더를 컴파일 하기 위한 쉐이더 모델
	

● 연산자 ( Operators )
	- 수식 ( Expression ) : 연산자로 연결된 일련의 변수들과 리터럴 상수들 
	- 대부분의 연산자는 요소별 ( Per - Component ) 연산을 수행 

● 변수 ( Variables )


상수 ( Constant )의 의미는 하나의 Draw...() 함수 호출 내에서 
쉐이더 변수의 값이 변하지 않는다는 것임
	- 팩킹은 벡터의 요소와 스칼라 값이 레즈스터 경계를 넘지 않도록 나열(주소지정) 하는 것이다 
	 쉐이더 상수 변수들을 자동적으로 팩킹 될 수 있으며 팩킹 오프셋을 지정하면 수동으로 팩킹 할 수 있다.
	 상수 버퍼의 변수들을 팩킹할 때 상수 데이터 형이 혼합 될 수 없다.

● 상수 버퍼 변수의 팩킹 규칙 
	 - HLSL 은 상수 버퍼의 변수들을 16-바이트 경계를 넘지 않도록 팩킹한다.
	 - 하나의 변수가 경계에 걸치게 되면 새로운 4-여소 벡터에서 시작한다 ( 주소 지정 )
	 - 구조체의 첫 번째 변수는 다음 4-요소 벡터에서 시작된다 ( 구조체의 크기는 16의 배수 )
	 - 배열은 기본적으로 팩킹되지 않고 배열의 모든 원소는 40요소 벡터로 지정된다. 
	 - 팩킹된 쉐이더 상수버퍼와 응용 프로그램의 메모리 구조가 다를 수 있다. 

[키워드]			Keywords
[전처리 지시자]	Processore Directives 

● 쉐이더 프로그래밍
	1. HLSL 언어를 사용하여 쉐이더 프로그램을 작성한다
	2. 쉐이더 컴파일러로 컴파일 한다. (fxc.exe)사용
	
● D3D 프로그래밍
	1. D3D 쉐이더 컴파일러로 컴파일 
		D3DCompule() / D3DCompileFromFile() 함수 사용 
	
	2. 컴파일 성공시 바이트코드(ByteCode) 생성 
		-> 바이트코드는 쉐이더의 어셈블리 명령어들을 포함하는 이진 스트림
	
	3. D3D12 런타임 파이프라인 상태 객체를 생성
		-> D3D12_GRAPHICS_PIPELINE_STATE_DESC::VS
		생성된 쉐이더 객체를 세팅하고
		D3D12Device::CreateGraphicsPipelineState()
	
	4. ID3D12GraphicsCommandList::SetPipelineState() 를 이용해
		컴파일된 쉐이더 객체를 그래픽스 파이프라인에 연결한다.

	5. 파이프라인의 각 단계에 쉐이더 객체가 연결되면
	DrawInstanced() DrawIndexInstanced() 함수 호출 



● Resoource 
	- 쉐이더 리소스 
		a. Read Only : 정점 버퍼, 인덱스 버퍼, 상수 버퍼 , 텍스처 버퍼 
		b. Read/Write: Unordered Access View 
	- 차이점 
		a. 정점 버퍼/인덱스 버퍼 
			-> 쉐이더에서 직접 사용할 수 없음, 배열 , 뷰가 필요 ( 서술자 힙은 필요없다 )
		b. Constant Buffer 
			-> 연결된 쉐이더에서 전역변수 처럼 사용
			   구조체와 유사하며 뷰가 필요하다.
			   크기는 256바이트의 배수
			   하드웨어 레지스터(4-요소 벡터)사용
		c. Buffer 
			-> 배열, 인덱스로 사용
			   구조체 배열, 크기제한 없음, 뷰가 필요
			   모든 쉐이더 단계에서 사용하며 여러 단계에 연결된다.
			   뷰가 UAV 이면 쓰기가 가능하다. 
		d. Texture
			-> 모든 쉐이더 단계에서 사용 가능하며 
		       샘플러 객체를 통하여 사용할 수 있다. 

	- Shader Resource View 
		모든 쉐이더 단계에 연결되며 읽기 전용일 때 여러 쉐이더 단계에 연결 가능하다 .
	- Unordered Access View 
		Pixel Shader 와 Compute Shader 에 연결 ( 하나의 쉐이더 단계에만 연결된다 )
		쓰기 가능 
		하나의 쉐이더 단계에만 연결 가능 



● Swizzling
	임의의 소스 레지스터 구성 요소를 임의의 임시 레지스터 구성 요소로 복사하는 기능

● Masking 
	.zx = .xz 

쉐이더에서 행열의 순서는 기본적으로 열-우선 행렬이다. 
행렬의 열이 하나의 레지스터에 저장된다.
